function sys = LTI(system_description)
    % LTI - Implements simple LTI systems for testing control algorithms
    %
    % INPUT:
    %   system_description - Type of system [string] (e.g.,
    %   'single_integrator')
    %
    % OUTPUT:
    %   sys - [struct] with fields A,B,C,D, constraints, parameters
    sys = struct();

    switch system_description
        case 'single_integrator'
            sys.A = 1;
            sys.B = 1;
            sys.C = 1;
            sys.D = 0;

            sys.parameters.state_name = 'Position';
            sys.parameters.input_name = 'Velocity';

            sys.constraints.U = [-5,5];
            sys.constraints.Y = [-inf, inf];

            sys.initial_state = 0; % Starting position
            sys.target = 10; % Desired position

        case 'double_integrator'
            sys.A = [1 1; 0 1];
            sys.B = [0; 1];
            sys.C = [1 0];
            sys.D = 0;

            sys.parameters.state_name = {'Position', 'Velocity'};
            sys.parameters.input_name = {'Acceleration'};

            sys.constraints.U = [-10,10]; % Acceleration limits
            sys.constraints.Y = [-50, 50]; % Position limits

            sys.initial_state = [0; 0]; % Starting position and velocity
            sys.target = [10; 0]; % Desired position and velocity
            
        case 'mass_spring_dampler'
            m = 1; % Mass
            k = 1; % Spring constant
            b = 0.2; % Damping coefficient
            dt = 0.1; % Sampling time

            % State-space matrices
            sys.A = [1 dt; -k/m*dt 1 - b/m*dt];
            sys.B = [0; dt/m];
            sys.C = [1 0];
            sys.D = 0;    

            sys.parameters.mass = m;
            sys.parameters.spring_constant = k;
            sys.parameters.damping = b;
            sys.parameters.sampling_time = dt;

            sys.constraints.U = [0; 0]; % 
            sys.constraints.Y = [1; 0];
    end
